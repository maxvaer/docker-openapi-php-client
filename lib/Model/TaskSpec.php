<?php
/**
 * TaskSpec
 *
 * PHP version 7.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * The version of the OpenAPI document: 1.40
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TaskSpec Class Doc Comment
 *
 * @category Class
 * @description User modifiable task configuration.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TaskSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaskSpec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'plugin_spec' => '\OpenAPI\Client\Model\TaskSpecPluginSpec',
        'container_spec' => '\OpenAPI\Client\Model\TaskSpecContainerSpec',
        'network_attachment_spec' => '\OpenAPI\Client\Model\TaskSpecNetworkAttachmentSpec',
        'resources' => '\OpenAPI\Client\Model\TaskSpecResources',
        'restart_policy' => '\OpenAPI\Client\Model\TaskSpecRestartPolicy',
        'placement' => '\OpenAPI\Client\Model\TaskSpecPlacement',
        'force_update' => 'int',
        'runtime' => 'string',
        'networks' => '\OpenAPI\Client\Model\NetworkAttachmentConfig[]',
        'log_driver' => '\OpenAPI\Client\Model\TaskSpecLogDriver'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'plugin_spec' => null,
        'container_spec' => null,
        'network_attachment_spec' => null,
        'resources' => null,
        'restart_policy' => null,
        'placement' => null,
        'force_update' => null,
        'runtime' => null,
        'networks' => null,
        'log_driver' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'plugin_spec' => 'PluginSpec',
        'container_spec' => 'ContainerSpec',
        'network_attachment_spec' => 'NetworkAttachmentSpec',
        'resources' => 'Resources',
        'restart_policy' => 'RestartPolicy',
        'placement' => 'Placement',
        'force_update' => 'ForceUpdate',
        'runtime' => 'Runtime',
        'networks' => 'Networks',
        'log_driver' => 'LogDriver'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'plugin_spec' => 'setPluginSpec',
        'container_spec' => 'setContainerSpec',
        'network_attachment_spec' => 'setNetworkAttachmentSpec',
        'resources' => 'setResources',
        'restart_policy' => 'setRestartPolicy',
        'placement' => 'setPlacement',
        'force_update' => 'setForceUpdate',
        'runtime' => 'setRuntime',
        'networks' => 'setNetworks',
        'log_driver' => 'setLogDriver'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'plugin_spec' => 'getPluginSpec',
        'container_spec' => 'getContainerSpec',
        'network_attachment_spec' => 'getNetworkAttachmentSpec',
        'resources' => 'getResources',
        'restart_policy' => 'getRestartPolicy',
        'placement' => 'getPlacement',
        'force_update' => 'getForceUpdate',
        'runtime' => 'getRuntime',
        'networks' => 'getNetworks',
        'log_driver' => 'getLogDriver'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['plugin_spec'] = isset($data['plugin_spec']) ? $data['plugin_spec'] : null;
        $this->container['container_spec'] = isset($data['container_spec']) ? $data['container_spec'] : null;
        $this->container['network_attachment_spec'] = isset($data['network_attachment_spec']) ? $data['network_attachment_spec'] : null;
        $this->container['resources'] = isset($data['resources']) ? $data['resources'] : null;
        $this->container['restart_policy'] = isset($data['restart_policy']) ? $data['restart_policy'] : null;
        $this->container['placement'] = isset($data['placement']) ? $data['placement'] : null;
        $this->container['force_update'] = isset($data['force_update']) ? $data['force_update'] : null;
        $this->container['runtime'] = isset($data['runtime']) ? $data['runtime'] : null;
        $this->container['networks'] = isset($data['networks']) ? $data['networks'] : null;
        $this->container['log_driver'] = isset($data['log_driver']) ? $data['log_driver'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets plugin_spec
     *
     * @return \OpenAPI\Client\Model\TaskSpecPluginSpec|null
     */
    public function getPluginSpec()
    {
        return $this->container['plugin_spec'];
    }

    /**
     * Sets plugin_spec
     *
     * @param \OpenAPI\Client\Model\TaskSpecPluginSpec|null $plugin_spec plugin_spec
     *
     * @return $this
     */
    public function setPluginSpec($plugin_spec)
    {
        $this->container['plugin_spec'] = $plugin_spec;

        return $this;
    }

    /**
     * Gets container_spec
     *
     * @return \OpenAPI\Client\Model\TaskSpecContainerSpec|null
     */
    public function getContainerSpec()
    {
        return $this->container['container_spec'];
    }

    /**
     * Sets container_spec
     *
     * @param \OpenAPI\Client\Model\TaskSpecContainerSpec|null $container_spec container_spec
     *
     * @return $this
     */
    public function setContainerSpec($container_spec)
    {
        $this->container['container_spec'] = $container_spec;

        return $this;
    }

    /**
     * Gets network_attachment_spec
     *
     * @return \OpenAPI\Client\Model\TaskSpecNetworkAttachmentSpec|null
     */
    public function getNetworkAttachmentSpec()
    {
        return $this->container['network_attachment_spec'];
    }

    /**
     * Sets network_attachment_spec
     *
     * @param \OpenAPI\Client\Model\TaskSpecNetworkAttachmentSpec|null $network_attachment_spec network_attachment_spec
     *
     * @return $this
     */
    public function setNetworkAttachmentSpec($network_attachment_spec)
    {
        $this->container['network_attachment_spec'] = $network_attachment_spec;

        return $this;
    }

    /**
     * Gets resources
     *
     * @return \OpenAPI\Client\Model\TaskSpecResources|null
     */
    public function getResources()
    {
        return $this->container['resources'];
    }

    /**
     * Sets resources
     *
     * @param \OpenAPI\Client\Model\TaskSpecResources|null $resources resources
     *
     * @return $this
     */
    public function setResources($resources)
    {
        $this->container['resources'] = $resources;

        return $this;
    }

    /**
     * Gets restart_policy
     *
     * @return \OpenAPI\Client\Model\TaskSpecRestartPolicy|null
     */
    public function getRestartPolicy()
    {
        return $this->container['restart_policy'];
    }

    /**
     * Sets restart_policy
     *
     * @param \OpenAPI\Client\Model\TaskSpecRestartPolicy|null $restart_policy restart_policy
     *
     * @return $this
     */
    public function setRestartPolicy($restart_policy)
    {
        $this->container['restart_policy'] = $restart_policy;

        return $this;
    }

    /**
     * Gets placement
     *
     * @return \OpenAPI\Client\Model\TaskSpecPlacement|null
     */
    public function getPlacement()
    {
        return $this->container['placement'];
    }

    /**
     * Sets placement
     *
     * @param \OpenAPI\Client\Model\TaskSpecPlacement|null $placement placement
     *
     * @return $this
     */
    public function setPlacement($placement)
    {
        $this->container['placement'] = $placement;

        return $this;
    }

    /**
     * Gets force_update
     *
     * @return int|null
     */
    public function getForceUpdate()
    {
        return $this->container['force_update'];
    }

    /**
     * Sets force_update
     *
     * @param int|null $force_update A counter that triggers an update even if no relevant parameters have been changed.
     *
     * @return $this
     */
    public function setForceUpdate($force_update)
    {
        $this->container['force_update'] = $force_update;

        return $this;
    }

    /**
     * Gets runtime
     *
     * @return string|null
     */
    public function getRuntime()
    {
        return $this->container['runtime'];
    }

    /**
     * Sets runtime
     *
     * @param string|null $runtime Runtime is the type of runtime specified for the task executor.
     *
     * @return $this
     */
    public function setRuntime($runtime)
    {
        $this->container['runtime'] = $runtime;

        return $this;
    }

    /**
     * Gets networks
     *
     * @return \OpenAPI\Client\Model\NetworkAttachmentConfig[]|null
     */
    public function getNetworks()
    {
        return $this->container['networks'];
    }

    /**
     * Sets networks
     *
     * @param \OpenAPI\Client\Model\NetworkAttachmentConfig[]|null $networks Specifies which networks the service should attach to.
     *
     * @return $this
     */
    public function setNetworks($networks)
    {
        $this->container['networks'] = $networks;

        return $this;
    }

    /**
     * Gets log_driver
     *
     * @return \OpenAPI\Client\Model\TaskSpecLogDriver|null
     */
    public function getLogDriver()
    {
        return $this->container['log_driver'];
    }

    /**
     * Sets log_driver
     *
     * @param \OpenAPI\Client\Model\TaskSpecLogDriver|null $log_driver log_driver
     *
     * @return $this
     */
    public function setLogDriver($log_driver)
    {
        $this->container['log_driver'] = $log_driver;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


